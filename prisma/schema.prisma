generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int      @id @default(autoincrement())
  clerkId          String   @unique @map("clerk_id")
  email            String   @unique
  firstName        String   @map("first_name")
  lastName         String   @map("last_name")
  profileImageUrl  String?  @map("profile_image_url")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations for trip management
  handledTrips     Trip[]        @relation("TripHandler")
  tripMemberships  TripMember[]
  tripMessages     TripMessage[]
  
  // Relations for trip requests
  sentRequests     TripRequest[] @relation("RequestSender")
  receivedRequests TripRequest[] @relation("RequestReceiver")
  
  // Relations for notifications
  notifications    Notification[]

  @@map("users")
  @@index([clerkId])
  @@index([email])
}

model Trip {
  id            String     @id @default(cuid())
  name          String
  description   String?
  startDate     DateTime?  @map("start_date")
  endDate       DateTime?  @map("end_date")
  startingPoint String?    @map("starting_point")
  status        TripStatus @default(PLANNED)
  handlerClerkId String    @map("handler_clerk_id")
  inviteCode    String     @unique @map("invite_code")
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")

  // Relations
  handler  User          @relation("TripHandler", fields: [handlerClerkId], references: [clerkId])
  members  TripMember[]
  messages TripMessage[]
  requests TripRequest[]

  @@map("trips")
  @@index([handlerClerkId])
  @@index([inviteCode])
}

model TripMember {
  id          String     @id @default(cuid())
  tripId      String     @map("trip_id")
  userClerkId String     @map("user_clerk_id")
  role        UserRole   @default(MEMBER)
  joinedAt    DateTime   @default(now()) @map("joined_at")
  joinMethod  JoinMethod @default(UNKNOWN) @map("join_method")
  joinDetails String?    @map("join_details") // Additional context about how they joined

  // Relations
  trip Trip @relation(fields: [tripId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userClerkId], references: [clerkId])

  @@unique([tripId, userClerkId])
  @@map("trip_members")
  @@index([tripId])
  @@index([userClerkId])
}

model TripMessage {
  id          String   @id @default(cuid())
  tripId      String   @map("trip_id")
  userClerkId String   @map("user_clerk_id")
  message     String
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  trip Trip @relation(fields: [tripId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userClerkId], references: [clerkId])

  @@map("trip_messages")
  @@index([tripId])
  @@index([createdAt])
}

model TripRequest {
  id              String        @id @default(cuid())
  tripId          String        @map("trip_id")
  requesterClerkId String       @map("requester_clerk_id")
  receiverClerkId String        @map("receiver_clerk_id") // Trip handler
  status          RequestStatus @default(PENDING)
  message         String?       // Optional message from requester
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  // Relations
  trip      Trip @relation(fields: [tripId], references: [id], onDelete: Cascade)
  requester User @relation("RequestSender", fields: [requesterClerkId], references: [clerkId])
  receiver  User @relation("RequestReceiver", fields: [receiverClerkId], references: [clerkId])

  @@unique([tripId, requesterClerkId]) // Prevent duplicate requests
  @@map("trip_requests")
  @@index([tripId])
  @@index([requesterClerkId])
  @@index([receiverClerkId])
  @@index([status])
}

model Notification {
  id          String            @id @default(cuid())
  userClerkId String            @map("user_clerk_id")
  type        NotificationType
  title       String
  message     String
  data        Json?             // Additional data as JSON
  read        Boolean           @default(false)
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userClerkId], references: [clerkId], onDelete: Cascade)

  @@map("notifications")
  @@index([userClerkId])
  @@index([read])
  @@index([createdAt])
}

enum TripStatus {
  PLANNED
  ACTIVE
  COMPLETED
}

enum UserRole {
  HANDLER
  MEMBER
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum JoinMethod {
  CREATED        // User created the trip (handler)
  INVITE_CODE    // Joined via invite code
  INVITE_LINK    // Joined via invite link
  REQUEST        // Joined via request (browsing/discovery)
  INVITATION     // Added via invitation from handler
  UNKNOWN        // Legacy/unknown method
}

enum NotificationType {
  MEMBER_REMOVED
  TRIP_DELETED
  REQUEST_ACCEPTED
  REQUEST_REJECTED
  MEMBER_JOINED
}
